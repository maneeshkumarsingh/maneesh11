import pickleimport jsonimport loggingimport pandas as pdimport functoolsimport operatorimport timeimport multiprocessingwith open('A2P_P2P_Config.json') as config_file:    config = json.load(config_file)vectorizer_save = config['VECTORIZER']model_save = config['MODEL']logpath = config['LOG_PATH']P2P_File_enable = config['PROCESS_FILE_EXTENSION']trainingData = config['TRAINING_DATA_PATH']vectorizer = pickle.load(open(vectorizer_save, 'rb'))A2P_P2P_detect_model = pickle.load(open(model_save, 'rb'))#LogCreationPath = Log_tag + Log_taglogging.basicConfig(filename=logpath,level=logging.INFO,format='%(asctime)s|%(levelname)s:%(lineno)d]%(message)s')def A2P_P2P_predict(text):    logging.info('entered into A2P_P2P_predict')    logging.info('Message recived from cpp:%s',text)    global vectorizer    global A2P_P2P_detect_model    try:        #start = time.time()        pred = A2P_P2P_detect_model.predict(vectorizer.transform([text]))[0]        #end = time.time()        #tim = (end - start)        #print(tim)        logging.info('Predict successfull....')        return pred    except Exception as exception:        print("Exception in process_Predict:", exception)        logging.error(f'Exception in process_Predict:{exception}')if __name__ == '__main__':    training_df = pd.read_csv(trainingData, names=['training_df'], encoding='iso-8859-1', engine='c')    training_df = training_df.head(10000)    pool = multiprocessing.Pool()    pool = multiprocessing.Pool(processes=4)    inputs=[]    start = time.time()    for index, row in training_df.iterrows():        outputs = pool.map(A2P_P2P_predict, inputs)        print(outputs)        inputs.append(outputs)    #outputs = pool.map(A2P_P2P_predict, inputs)    end = time.time()    print('time',end-start)    print("Output: {}".format(outputs))    print(len(outputs))'''def input():    text = 'mascomchat let check account balance buy airtime data bundles whatsapp get started save number phonenumbr send hi|Unnamed: 1'    start = time.time()    for i in range(0,100):    	res = A2P_P2P_predict(text)    	print(res)    end = time.time()    tim = (end - start)    print(tim)    return res    #pred = A2P_P2P_detect_model.predict(vectorizer.transform(["i have got a new phone. its from Apple.. and i love it!"]))[0]   # print("predicted class:", res)    #print(pred)'''